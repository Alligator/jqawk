// Code generated by "stringer -type=TokenTag -linecomment"; DO NOT EDIT.

package lang

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[Error-1]
	_ = x[Ident-2]
	_ = x[Str-3]
	_ = x[Regex-4]
	_ = x[Num-5]
	_ = x[Begin-6]
	_ = x[End-7]
	_ = x[Print-8]
	_ = x[Function-9]
	_ = x[Return-10]
	_ = x[If-11]
	_ = x[Else-12]
	_ = x[For-13]
	_ = x[While-14]
	_ = x[LCurly-15]
	_ = x[RCurly-16]
	_ = x[LSquare-17]
	_ = x[RSquare-18]
	_ = x[LParen-19]
	_ = x[RParen-20]
	_ = x[LessThan-21]
	_ = x[GreaterThan-22]
	_ = x[Dollar-23]
	_ = x[Comma-24]
	_ = x[Dot-25]
	_ = x[Equal-26]
	_ = x[EqualEqual-27]
	_ = x[BangEqual-28]
	_ = x[LessEqual-29]
	_ = x[GreaterEqual-30]
	_ = x[SemiColon-31]
	_ = x[Plus-32]
	_ = x[Minus-33]
	_ = x[Multiply-34]
	_ = x[Divide-35]
	_ = x[PlusEqual-36]
	_ = x[MinusEqual-37]
	_ = x[MultiplyEqual-38]
	_ = x[DivideEqual-39]
	_ = x[Tilde-40]
	_ = x[BangTilde-41]
	_ = x[AmpAmp-42]
	_ = x[PipePipe-43]
}

const _TokenTag_name = "EOFErrorIdentStrRegexNumBeginEndPrintFunctionReturnIfElseForWhile{}[]()<>$,.===!=<=>=;+-*/+=-=*=/=~!~&&||"

var _TokenTag_index = [...]uint8{0, 3, 8, 13, 16, 21, 24, 29, 32, 37, 45, 51, 53, 57, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 85, 86, 87, 88, 89, 90, 92, 94, 96, 98, 99, 101, 103, 105}

func (i TokenTag) String() string {
	if i >= TokenTag(len(_TokenTag_index)-1) {
		return "TokenTag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenTag_name[_TokenTag_index[i]:_TokenTag_index[i+1]]
}
