// Code generated by "stringer -type=TokenTag -linecomment"; DO NOT EDIT.

package lang

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[Error-1]
	_ = x[Ident-2]
	_ = x[Str-3]
	_ = x[Regex-4]
	_ = x[Num-5]
	_ = x[Begin-6]
	_ = x[End-7]
	_ = x[BeginFile-8]
	_ = x[EndFile-9]
	_ = x[Print-10]
	_ = x[Function-11]
	_ = x[Return-12]
	_ = x[If-13]
	_ = x[Else-14]
	_ = x[For-15]
	_ = x[While-16]
	_ = x[In-17]
	_ = x[Match-18]
	_ = x[Break-19]
	_ = x[Continue-20]
	_ = x[Next-21]
	_ = x[Newline-22]
	_ = x[Exit-23]
	_ = x[Null-24]
	_ = x[Is-25]
	_ = x[True-26]
	_ = x[False-27]
	_ = x[LCurly-28]
	_ = x[RCurly-29]
	_ = x[LSquare-30]
	_ = x[RSquare-31]
	_ = x[LParen-32]
	_ = x[RParen-33]
	_ = x[LessThan-34]
	_ = x[GreaterThan-35]
	_ = x[Dollar-36]
	_ = x[Comma-37]
	_ = x[Dot-38]
	_ = x[Equal-39]
	_ = x[EqualEqual-40]
	_ = x[BangEqual-41]
	_ = x[LessEqual-42]
	_ = x[GreaterEqual-43]
	_ = x[Colon-44]
	_ = x[SemiColon-45]
	_ = x[Plus-46]
	_ = x[Minus-47]
	_ = x[Multiply-48]
	_ = x[Divide-49]
	_ = x[PlusEqual-50]
	_ = x[MinusEqual-51]
	_ = x[MultiplyEqual-52]
	_ = x[DivideEqual-53]
	_ = x[Tilde-54]
	_ = x[BangTilde-55]
	_ = x[AmpAmp-56]
	_ = x[PipePipe-57]
	_ = x[Arrow-58]
	_ = x[Bang-59]
	_ = x[PlusPlus-60]
	_ = x[MinusMinus-61]
	_ = x[Percent-62]
}

const _TokenTag_name = "EOFErrorIdentStrRegexNumBeginEndBeginFileEndFilePrintFunctionReturnIfElseForWhileInMatchBreakContinueNextNewlineExitNullIstruefalse{}[]()<>$,.===!=<=>=:;+-*/+=-=*=/=~!~&&||=>!++--%"

var _TokenTag_index = [...]uint8{0, 3, 8, 13, 16, 21, 24, 29, 32, 41, 48, 53, 61, 67, 69, 73, 76, 81, 83, 88, 93, 101, 105, 112, 116, 120, 122, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 149, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 165, 166, 168, 170, 172, 174, 175, 177, 179, 180}

func (i TokenTag) String() string {
	if i >= TokenTag(len(_TokenTag_index)-1) {
		return "TokenTag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenTag_name[_TokenTag_index[i]:_TokenTag_index[i+1]]
}
