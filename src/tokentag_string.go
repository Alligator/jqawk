// Code generated by "stringer -type=TokenTag -linecomment"; DO NOT EDIT.

package lang

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[Error-1]
	_ = x[Ident-2]
	_ = x[Str-3]
	_ = x[Regex-4]
	_ = x[Num-5]
	_ = x[Begin-6]
	_ = x[End-7]
	_ = x[Print-8]
	_ = x[Function-9]
	_ = x[Return-10]
	_ = x[If-11]
	_ = x[Else-12]
	_ = x[While-13]
	_ = x[LCurly-14]
	_ = x[RCurly-15]
	_ = x[LSquare-16]
	_ = x[RSquare-17]
	_ = x[LParen-18]
	_ = x[RParen-19]
	_ = x[LessThan-20]
	_ = x[GreaterThan-21]
	_ = x[Dollar-22]
	_ = x[Comma-23]
	_ = x[Dot-24]
	_ = x[Equal-25]
	_ = x[EqualEqual-26]
	_ = x[BangEqual-27]
	_ = x[LessEqual-28]
	_ = x[GreaterEqual-29]
	_ = x[SemiColon-30]
	_ = x[Plus-31]
	_ = x[Minus-32]
	_ = x[Multiply-33]
	_ = x[Divide-34]
	_ = x[PlusEqual-35]
	_ = x[MinusEqual-36]
	_ = x[MultiplyEqual-37]
	_ = x[DivideEqual-38]
	_ = x[Tilde-39]
	_ = x[BangTilde-40]
	_ = x[AmpAmp-41]
	_ = x[PipePipe-42]
}

const _TokenTag_name = "EOFErrorIdentStrRegexNumBeginEndPrintFunctionReturnIfElseWhile{}[]()<>$,.===!=<=>=;+-*/+=-=*=/=~!~&&||"

var _TokenTag_index = [...]uint8{0, 3, 8, 13, 16, 21, 24, 29, 32, 37, 45, 51, 53, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 80, 82, 83, 84, 85, 86, 87, 89, 91, 93, 95, 96, 98, 100, 102}

func (i TokenTag) String() string {
	if i >= TokenTag(len(_TokenTag_index)-1) {
		return "TokenTag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenTag_name[_TokenTag_index[i]:_TokenTag_index[i+1]]
}
